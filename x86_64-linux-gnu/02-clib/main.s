.text

// Using the C library forces us to use
// the main function as start address.
// The 'main' symbol needs to be exported.
.global main
main:
  // Provide the start address of the message as first
  // argument to 'puts' by putting it in the 'rdi' register.
  //
  // If the symbol 'message' lies in the same section as the
  // the calling part then using the 'mov' instruction seems
  // to suffice because the immediate address of 'message'
  // fits into the immediate bits of the instruction format.
  //
  // Putting the symbol 'message' into a different section,
  // like 'data', results in an address much further away
  // from the calling part.
  // As a consequence, 'mov' is not able to decribe the address
  // in its immediate bits and non-static linking fails because
  // the 'data' section would have to be relocated.
  //
  // Using the 'lea' instruction to load the effective address,
  // allows 64-bit addressing and makes non-static linking possible.
  // mov $message, %rdi
  lea message(%rip), %rdi
  // Call 'puts' to print the given message to the screen.
  call puts

  // Set return value to zero to indicate success.
  // The 'xor' instruction seems to be the fastest way of doing this.
  // It is also typically generated by C/C++ compilers.
  // mov $0, %rax
  xor %rax, %rax
  // Return from the main function.
  ret

.data
message:
  // Zero-Terminated ASCII-encoded String
  .asciz "This line is printed by the C standard library."
